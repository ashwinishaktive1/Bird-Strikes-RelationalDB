---
title: "CS5200 Practicum 1"
authors: "Ashwini Shaktivel Kumar & Pooja Ramakrishnan"
email1: "kumar.ashwi@northeastern.edu"
email2: "ramakrishnan.po@northeastern.edu"
date: "2022-10-30"
output: html_document
---

```{r Libraries}
# RMySQL database Library
# install.packages("RMySQL", type="source")
library(RMySQL)
library(lubridate)
library(ggplot2)
```

Loading database with pre-setup configuration and log-in details. You may connect with test public database and run the code to reproduce the database and it's functionalities. 

```{r Loading Database}
# 2. Settings
db_user <- 'admin'
db_password <- 'cs5200dbms'
db_name <- 'practicum1db'
db_host <- 'database-2.cgy5n9xqkoyk.us-east-1.rds.amazonaws.com' 
db_port <- 3306 # always this port unless you change it during installation
```

Connecting to the database. Use reference 'mydb' to send and retrieve data from the database.

```{r Connect Database}
# 3. Connect to DB
mydb <-  dbConnect(MySQL(), user = db_user, password = db_password,
                 dbname = db_name, host = db_host, port = db_port)
```

*Checking if the table exists, dropping if yes.*

```{sql connection=mydb}
DROP TABLE IF EXISTS Incidents
```

```{sql connection=mydb}
DROP TABLE IF EXISTS Conditions
```

```{sql connection=mydb}
DROP TABLE IF EXISTS Airports
```

# Question 1 : 

*Q. * (20 pts / 2.5 hrs) Inspecting the data file; assume that this database will be used for an app that can be used by pilots (of any kind of aircraft) to report wildlife incidents. Create a new database and connect to it from R. Then create the following database schema:

*The questions may be arranged in a different order, as per convenience. We have tried our best to add the most relevant question number on top of the table creation queries for Questions 1 and 2.*

## Question 1 D : 

*Q. * Create a lookup table conditions(cid, condition, explanation) and link this lookup table to the incidents table with the conditions foreign key. This table contains the value of all conditions, e.g., 'Overcast'. Leave the explanation column empty (future expansion).

`Conditions` is an extensible look-up table, containing all possible sky conditions referenced by the `Incidents` table. 

```{sql connection=mydb}
CREATE TABLE IF NOT EXISTS Conditions(
  cid INTEGER NOT NULL PRIMARY KEY,
  `condition` VARCHAR(255) UNIQUE NOT NULL,
  explanation TEXT
);
```

```{sql connection=mydb}
INSERT INTO Conditions(cid, `condition`, explanation) VALUES
  (1, "No Cloud", "Clear sky"),
  (2, "Some Cloud", "Spreaded clouds"),
  (3, "Overcast", "Very clouded");
```

## Question 1 B : 

*Q. * Create a table that stores airports and states called airports(aid, airportName, airportCode, state). aid is a synthetic primary key, airportName and state are the airport name and state from the data file. The airport code should be the airport's international code, e.g., BOS for Boston or LGA for LaGuardia. However, you may leave it empty for this database -- it is for future expansion.

`aid` is a composite primary key of `airportName` and `state` which is also a foreign key in the `Incidents` table. The `airportCode` column may remain null, and is currently open for future expansion. 

```{sql connection=mydb}
CREATE TABLE IF NOT EXISTS Airports(
aid VARCHAR(255) NOT NULL,
airportName VARCHAR(255), 
state TEXT,
airportCode VARCHAR(255),

PRIMARY KEY (aid)
);
```

## Question 1 A : 

*Q. * Create a table that stores wildlife strike incidents called incidents(rid, date, origin, airline, aircraft, flightPhase, altitude, conditions, warning). Only store the date, not the time of the incident. Make 'warning' a Boolean flag and use TRUE if the pilot was warned, FALSE otherwise. Use appropriate data types and store the date as a date type not as text subject to the data types your chosen database supports. If date or boolean are not supported, choose another data type that will work or split the dates into month, day, and year columns.

`Incidents` table contains details captured for the bird strike events. `origin` and `sky_condition` field are foreign keys and are referenced from the `Airports` and `Conditions` tables respectively. `incidentDate` is in accepted date 'YYYY-MM-DD' format. `warning` is in Boolean datatype, where 0 represents FALSE and 1 represents TRUE.

## Question 1 C : 

*Q. * Link the incidents and airports tables via the origin foreign key in incidents to the primary key aid in airports. The origin is an FK to the airport in the airports table. The origin column in the incidents table is not related to the "origin" column in the source CSV.

```{sql connection=mydb}
CREATE TABLE IF NOT EXISTS Incidents(
rid INTEGER NOT NULL,
incidentDate DATE, 
flightPhase TEXT, 
altitude INTEGER,
origin VARCHAR(255),
airline VARCHAR(255),
aircraft VARCHAR(255),
warning BOOL NOT NULL,
sky_condition VARCHAR(255),

PRIMARY KEY (rid),
FOREIGN KEY (sky_condition) REFERENCES Conditions(`condition`),
FOREIGN KEY (origin) REFERENCES Airports(aid)
);
```

# Question 2 : 

*Q. * Place the Bird Strikes CSV file into the same folder as your R Notebook and the load it into R without a path name. The default path is the local folder that contains the R Notebook when you have the R Notebook in an R Project. Once loaded, populate the tables with the data from the appropriate columns. Omit the columns from the CSV that are not referenced in the tables. 

```{r Loading Data}
fn = "BirdStrikesData-V2.csv"

df.raw <- read.csv(file = fn,
                   header = T,
                   row.names = NULL,
                   stringsAsFactors = F)
head(df.raw, 3)
```

## Question 1 E : 

*Q. * Harmonize the flight phases to be one of: takeoff, landing, inflight, unknown. For example, for row 14, the flight phase was provided as "Landing Roll" -- change that to "landing" when storing the flightPhase. Code 'approach' as 'landing'; code 'climb' as 'takeoff', etc. Use your judgement as to what the appropriate harmonization is.

```{r Flight Phase Harmonization}
df.raw["flight_phase"][df.raw["flight_phase"] == "Landing Roll"] <- "Landing"
df.raw["flight_phase"][df.raw["flight_phase"] == "Approach"] <- "Landing"
df.raw["flight_phase"][df.raw["flight_phase"] == "Climb"] <- "Takeoff"
df.raw["flight_phase"][df.raw["flight_phase"] == "Take-off run"] <- "Takeoff"
df.raw["flight_phase"][df.raw["flight_phase"] == "Descent"] <- "Landing"
df.raw["flight_phase"][df.raw["flight_phase"] == "Taxi"] <- "Unknown"
```

# Question 2 :

*Q. * Use default values where the data file does not contain values or leave empty. Records (rows) from the CSV that do not have flight information may be omitted. If there is no airport or airline, then link to a "sentinel" airline or airport, i.e., add an "unknown" airline and airport to the tables rather than leaving the value NULL. Assign synthetic key values as and where needed and use them as primary keys.

We've created a synthetic column with concatenated `airportName` and `origin` to match with the composite Primary Key from `Airports` table. 

```{r Synthetic Composite Airport Name and Origin key}
df.raw$airport_origin = paste(df.raw$airport , df.raw$origin)

head(df.raw, 3)
```

Converting `rid` to integer datatype, to match with corresponding field datatype in the `Incidents` table.

```{r Updating rid}
df.raw$rid <- as.integer(df.raw$rid)

head(df.raw["rid"],3)
```

Converting `incidentDate` to POSIXct datatype, to match with corresponding field datatype in the `Incidents` table.

```{r Updating date}
names(df.raw)[names(df.raw) == "flight_date"] <- "incidentDate"
df.raw$incidentDate <- as.POSIXct(df.raw$incidentDate, format = "%m/%d/%Y")
class(df.raw$incidentDate) 
```

Converting `warning` to BOOLEAN (0/1) datatype, to match with corresponding field datatype in the `Incidents` table.

```{r Updating warning}
df.raw["pilot_warned_flag"][df.raw["pilot_warned_flag"] == "N"] <- 0
df.raw["pilot_warned_flag"][df.raw["pilot_warned_flag"] == "Y"] <- 1
as.logical(df.raw$pilot_warned_flag)
head(df.raw["pilot_warned_flag"], 3)
```

Dropping MILITARY flight incidents. 

```{r Drop Military}
df.raw <- df.raw[!grepl("MILITARY", df.raw$airline),]
```

Naming sentinel airlines and airports.

```{r Naming sentinel airlines and airports}
df.raw$airline <- ifelse(is.na(df.raw$airline)==TRUE, "Unknown", df.raw$airline)
df.raw$airport <- ifelse(is.na(df.raw$airport)==TRUE, "Unknown", df.raw$airport)
```

Drop incidents with missing flight information.

```{r Drop incidents with missing flight info}
df.raw <- df.raw[!(df.raw$airport=="" | is.na(df.raw$incidentDate) | df.raw$airline == "" | df.raw$pilot_warned_flag == "" | df.raw$altitude_ft == ""),]
df.raw
```

*`Airports` Dataframe*

```{r Airports Dataframe}
# set backing store to SQLite for sqldf
options(sqldf.driver = 'SQLite')

# notice how we select a concatenated value for the first column it acts as a placeholder for the artificial PK we will assign later

df.airports <- sqldf::sqldf("select airport_origin as aid, airport as airportName,  null as airportCode, origin as state from `df.raw`")

head(df.airports)
```

*`Incidents` Dataframe*

```{r Incidents Dataframe}
df.incidents <- sqldf::sqldf("select rid as rid, incidentDate, airport_origin as origin, flight_phase as flightPhase, aircraft as aircraft, airline as airline, altitude_ft as altitude, pilot_warned_flag as warning, sky_conditions as sky_condition from `df.raw`")

head(df.incidents)
```

*Writing the cleaned and required data to the `Airports` and `Incidents` tables.*

```{r Airports Write Table}
dbWriteTable(mydb,"Airports", df.airports, overwrite = F, append = T, row.names = 0)
```

```{r Incidents Write Table}
dbWriteTable(mydb,"Incidents", df.incidents, overwrite = F, append = T, row.names = 0)
```

# Question 3 : 

*Q. * Show that the loading of the data worked by displaying parts of each table (do not show the entire tables).  Document and explain your decisions. All data manipulation and importing work must occur in R. You may not modify the original data outside of R -- that would not be reproducible work. 
 
Printing the first 10 rows in `Airports` and `Incidents` tables to observe the table data in R. This can be further crossverified on the MySQL WorkBench. 

```{sql connection=mydb}
select * from Airports limit 10
```

```{sql connection=mydb}
select * from Incidents limit 10
```

```{sql connection=mydb}
select * from Conditions
```

# Question 4 : 

*Q. * Create a SQL query against your database to find the 10 airlines with the greatest number of incidents. You may either use a {sql} code chunk or an R function to execute the query. It must be a single query.

```{sql connection=mydb}
SELECT
  airline,
  COUNT(airline) AS `value_occurrence` 
FROM
  Incidents
GROUP BY 
  airline
ORDER BY 
  `value_occurrence` DESC
LIMIT 10;

```

# Question 5 : 

*Q. * Create a SQL query against your database to find the flight phases that had an above average number bird strike incidents (during any flight phase). You may either use a {sql} code chunk or an R function to execute the query. It must be a single query. To do this, find the number of bird strike incidents for each flight phase (each row in the CSV is a single bird strike incident). Then calculate the average across all flight phases and from there find those phases which had an above average number of bird strike incidents.

```{sql connection=mydb}
select 
avg(CountFP)
  FROM 
    (
    SELECT count(flightPhase) AS CountFP
      FROM Incidents
	  GROUP BY Incidents.flightPhase
    ) as counts
```

```{sql connection=mydb}
select flightPhase, count(flightPhase) from Incidents group by flightPhase;
```

```{sql connection=mydb}
select flightPhase,
  count(flightPhase) AS `count_value`
from Incidents
GROUP BY 
  flightPhase
having `count_value` > 
(select 
avg(CountFP)
  FROM 
    (
    SELECT count(flightPhase) AS CountFP
      FROM Incidents
	  GROUP BY Incidents.flightPhase
    ) as counts
);
```

Only the Landing and take-off flight phases has more than average occurances (which is 6337) in the incidents table.

# Question 6 : 

*Q. * (10 pts / 1 hr) Create a SQL query against your database to find the number of bird strike incidents by month (across all years). Include all airlines and all flights. You may either use a {sql} code chunk or an R function to execute the query. It must be a single query. This query can help answer the question which month, historically, is the most dangerous for bird strikes.

```{sql connection = mydb}
select monthname(incidentDate) as `Month`, count(rid) as `Count of Incidents` from Incidents
group by `Month`
order by month(incidentDate) asc
```

# Question 7 : 

*Q. * (5 pts / 4 hrs) Build a line chart that visualizes the number of bird strikes incidents per year from 2005 to 2011. Adorn the graph with appropriate axis labels, titles, legend, data labels, etc.

```{r Dataframe with Years and Counts of events per year}

# Get years and respective incident counts as follows:

df.incidents$incidentYear <- format(df.incidents$incidentDate, format = "%Y")
incidents.years <- as.data.frame(table(df.incidents$incidentYear))
incidents.years
```

```{r Converting Year datatype}

# Var1 represents the Year.

incidents.years$Var1 <- as.numeric(as.character(incidents.years$Var1))
```

```{r Plot}
incident_by_years_plot <- ggplot(subset(incidents.years, Var1 > 2004), aes(x=Var1, y=Freq, label =   Freq, group = 1)) +
                          geom_point() +
                          geom_line() +
                          xlab("Year") +
                          ylab("Frequency of Incidents") +
                          geom_label(size = 2, color = "red", nudge_y = 0.25) +
                          ggtitle("Number of Incidents by Year")

incident_by_years_plot
```

# Question 8 : 

*Q. * Create a stored procedure in MySQL (note that if you used SQLite, then you cannot complete this step) that adds a new incident to the database. You may decide what you need to pass to the stored procedure to add a bird strike incident and you must account for there being potentially a new airport. After insertion, show (in R) that your procedure worked. Note that if you used SQLite rather than the required MySQL for the practicum, then you cannot complete this question as SQLite does not support stored procedures.

*Solution :* To solve this problem, the stored procedure accepts the airportName and State. It then check if the combination of these (aid) is present in the Airports table. If it is not present, it creates a new airport. If it is already present, it creates a new incident under that airport. All of this is handled with the help of cases. 

```{sql connection=mydb}
DROP PROCEDURE IF EXISTS create_incident;
```

```{sql connection=mydb}
Create PROCEDURE create_incident(rid INTEGER, incidentDate DATE, flightPhase TEXT, altitude INTEGER , airline VARCHAR(255) , 
aircraft VARCHAR(255) , warning bool, sky_condition VARCHAR(255) , airportName VARCHAR(255) , state VARCHAR(255))
  BEGIN
      /*If the airport is not present*/
      DECLARE airport_present INTEGER;
      select count(*) from Airports where aid = concat(airportName," ",state) INTO airport_present;
	  if (airport_present = 0)
	  THEN
		  insert into Airports(aid, airportName, state) 
		  values (concat(airportName," ",state), airportName , state);
          
          insert into Incidents(rid,incidentDate,flightPhase,altitude , origin , airline, aircraft, warning, sky_condition) 
		  values (rid , STR_TO_DATE(incidentDate) , flightPhase , altitude , concat(airportName," ",state) , airline, aircraft, warning, sky_condition);
	  ELSE
          insert into Incidents(rid,incidentDate,flightPhase,altitude , origin , airline, aircraft, warning, sky_condition) 
          values (rid , incidentDate , flightPhase , altitude , concat(airportName," ",state) , airline, aircraft, warning, sky_condition);
      END IF;
  END;
```

*Testing the procedure by creating a new airport that does not exist in Airports table (testairport3)*

```{r}
sqlcall1 = "CALL create_incident(1411,'2015-9-9','Landing',12, 'dummyairline2' , 'dummyaircraft2' , 0 , 'Overcast' , 'testairport3' , 'teststate3')"
dbSendQuery(mydb, sqlcall1)
```

```{r}
sqlcall2 = " select * from Airports where state = 'teststate3' "
rs = dbSendQuery(mydb, sqlcall2)
data = fetch(rs,n=-1)
# data now has ALL the rows from the first result set

# loop through any additional result sets and discard
while(dbMoreResults(mydb) == TRUE) {
  dbNextResult(mydb)
}

# the actual data is in the object 'data'
print(data)
```

```{r}
sqlcall2 = " select * from Incidents where rid = 1411"
rs = dbSendQuery(mydb, sqlcall2)
data = fetch(rs,n=-1)
# data now has ALL the rows from the first result set

# loop through any additional result sets and discard
while(dbMoreResults(mydb) == TRUE) {
  dbNextResult(mydb)
}

# the actual data is in the object 'data'
print(data)
```

*Testing the procedure by creating a new incident for an already existent airport (testairport3)*

```{r}
sqlcall4 = "CALL create_incident(1412,'2015-9-9','Landing',12, 'dummyairline2' , 'dummyaircraft2' , 0 , 'Overcast' , 'testairport3' , 'teststate3')"
dbSendQuery(mydb, sqlcall4)
```

```{r}
sqlcall5 = " select * from Incidents where origin = 'testairport3 teststate3' "
rs = dbSendQuery(mydb, sqlcall5)
data = fetch(rs,n=-1)
# data now has ALL the rows from the first result set

# loop through any additional result sets and discard
while(dbMoreResults(mydb) == TRUE) {
  dbNextResult(mydb)
}

# the actual data is in the object 'data'
print(data)
```

```{r Database disconnect}
dbDisconnect(mydb)
```
